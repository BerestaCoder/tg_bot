import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton
import aiohttp
import random

load_dotenv()

token = os.getenv('TOKEN')
token_weather = os.getenv('TOKEN_WEATHER')
PROXY_URL = 'http://proxy.server:3128'

breeds_list = []

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info(update: Update):
    chat_id = update.effective_chat.id
    user = update.effective_user
    user_id = user.id
    message = update.effective_message
    timestamp = int(message.date.timestamp())
    first_name = user.first_name or ''
    last_name = user.last_name or ''
    full_name = f'{first_name} {last_name}'.strip()
    ava_str = user.id * timestamp # –ü–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –ø—É—Ç—ë–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—èid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–∏
    ava_url = f'https://robohash.org/{ava_str}?set=set1' # –ë—ã–ª –∏–∑–º–µ–Ω—ë–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä set, —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ä–æ–±–æ—Ç–æ–≤
    return chat_id, first_name, full_name, ava_url, user_id

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    text = update.message.text
    if text == '–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞':
        await send_cat(update, context)
    elif text == '–§–æ—Ç–æ —Å–æ–±–∞–∫–∏':
        await specify_dog(update, context)
    elif text == '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä':
        await context.bot.send_photo(chat_id=user_info[0], photo=user_info[3])
    elif text == '–ú–æ–π ID':
        await context.bot.send_message(chat_id=user_info[0], text=f'–¢–≤–æ–π ID: {user_info[4]}')
    elif text == '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è':
        await request_location(update, context)
    elif text == '–°–ª—É—á–∞–π–Ω–∞—è –ø–æ—Ä–æ–¥–∞':
        await send_random_dog(update, context)
    elif text in breeds_list:
        await send_dog(update, context, text)
    elif text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await wake_up(update, context,)
    else:
        await context.bot.send_message(chat_id=user_info[0], text=f'{user_info[1]}, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?')

# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –∏–ª–∏ –ø–∏—à–µ—Ç –≤ —á–∞—Ç /start
async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    button = ReplyKeyboardMarkup([
        ['–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞', '–§–æ—Ç–æ —Å–æ–±–∞–∫–∏'],
        ['–ú–æ–π ID', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
        ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è']
    ], resize_keyboard=True)
    await context.bot.send_message(
    chat_id=user_info[0],
    text=f'–ü—Ä–∏–≤–µ—Ç {user_info[2]}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!',
    reply_markup=button)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏
async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    location_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üìç', request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await context.bot.send_message(chat_id=user_info[0], text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:',
    reply_markup=location_keyboard
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    latitude = location.latitude
    longitude = location.longitude
    context.user_data['location'] = (latitude, longitude)
    weather_report = await get_weather(latitude, longitude)
    await update.message.reply_text(weather_report)
    main_menu = ReplyKeyboardMarkup([
        ['–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞', '–§–æ—Ç–æ —Å–æ–±–∞–∫–∏'],
        ['–ú–æ–π ID', '–°–≥–µ–Ω–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä'],
        ['–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è']
    ], resize_keyboard=True)
    await update.message.reply_text('üëå', reply_markup=main_menu)

# –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
async def get_weather(lat: float, lon: float) -> str:
    url=f'https://api.openweathermap.org/data/2.5/weather?APPID={token_weather}&lang=ru&units=metric&lat={lat}&lon={lon}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=PROXY_URL) as resp:
            if resp.status != 200:
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ'
            data = await resp.json()
    city = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')
    weather = data['weather'][0]['description']
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    wind_speed = data['wind']['speed']
    if wind_speed < 5:
        wind_recom = 'üå§ –ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è, –≤–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç'
    elif wind_speed < 10:
        wind_recom = 'üå´ –ù–∞ —É–ª–∏—Ü–µ –≤–µ—Ç—Ä–µ–Ω–æ, –æ–¥–µ–Ω—å—Ç–µ—Å—å —á—É—Ç—å —Ç–µ–ø–ª–µ–µ'
    elif wind_speed < 20:
        wind_recom = 'üå¨ –í–µ—Ç–µ—Ä –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞'
    else:
        wind_recom = 'üå™ –ù–∞ —É–ª–∏—Ü–µ —à—Ç–æ—Ä–º, –Ω–∞ —É–ª–∏—Ü—É –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å'
    return (
        f'–°–µ–π—á–∞—Å –≤ {city} {weather}\n'
        f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
        f'üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n'
        f'{wind_recom}'
    )

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
async def send_ava(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    await context.bot.send_photo(chat_id=user_info[0], photo=user_info[3])

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∞
async def send_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    url = f'https://cataas.com/cat/says/{user_info[1]}?json=true' # –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Ñ–æ—Ç–æ
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=PROXY_URL) as resp:
            if resp.status != 200:
                context.bot.send_message(chat_id=user_info[0], text='–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∞')
                return
            data = await resp.json()
    picture_url = data.get('url')
    await context.bot.send_photo(chat_id=user_info[0], photo=picture_url)

# –£—Ç–æ—á–Ω—è–µ—Ç –ø–æ—Ä–æ–¥—É —Å–æ–±–∞–∫–∏
async def specify_dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)

    await get_dog_breeds()
    br = random.sample(breeds_list, 6)

    button = ReplyKeyboardMarkup([
        [br[0], br[1]],
        [br[2], br[3]],
        [br[4], br[5]],
        ['–°–ª—É—á–∞–π–Ω–∞—è –ø–æ—Ä–æ–¥–∞', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ], resize_keyboard=True)
    await context.bot.send_message(
        chat_id=user_info[0],
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É —Å–æ–±–∞–∫–∏',
        reply_markup=button
    )

# –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫
async def get_dog_breeds():
    async with aiohttp.ClientSession() as session:
        async with session.get('https://dog.ceo/api/breeds/list/all', proxy=PROXY_URL) as response:
            data = await response.json()
    for breed_group, sub_breeds in data["message"].items():
        if len(sub_breeds) > 0:
            for sub_breed in sub_breeds:
                breeds_list.append(f"{breed_group}/{sub_breed}")
        else:
            breeds_list.append(breed_group)
    print(breeds_list)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏
async def send_dog(update: Update, context: ContextTypes.DEFAULT_TYPE, breed: str):
    user_info = get_user_info(update)
    url = f'https://dog.ceo/api/breed/{breed}/images/random'
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=PROXY_URL) as resp:
            if resp.status != 200:
                context.bot.send_message(chat_id=user_info[0], text='–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–±–∞–∫–∏')
                return
            data = await resp.json()
    picture_url = data.get('message')
    await context.bot.send_photo(chat_id=user_info[0], photo=picture_url)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏
async def send_random_dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_info = get_user_info(update)
    url = f'https://dog.ceo/api/breeds/image/random'
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=PROXY_URL) as resp:
            if resp.status != 200:
                context.bot.send_message(chat_id=user_info[0], text='–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–±–∞–∫–∏')
                return
            data = await resp.json()
    picture_url = data.get('message')
    await context.bot.send_photo(chat_id=user_info[0], photo=picture_url)

def run_bot():
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler('start', wake_up))
    app.add_handler(MessageHandler(filters.TEXT, say_hi))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.run_polling() # poll_interval=5.0